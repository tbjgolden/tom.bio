---
const { actualPath } = Astro.props;
const menuItems = [
  {
    url: "cv",
    label: "cv",
  },
  {
    url: "portfolio",
    label: "portfolio",
  },
  {
    url: "posts",
    label: "posts",
  },
];

const prefix = "";

const isEditMode = `/${actualPath}`.endsWith("/edit");

const url = actualPath.split("/").slice(0, -1).join("/");

if (isEditMode) {
  menuItems.push({
    url,
    label: "back",
  });
}
---

<h1 style="text-align:center">
  {prefix ? prefix + " " : ""}
  {actualPath === "" ? (
    <span>tom</span>
  ) : (
    <a href={import.meta.env.BASE_URL}>tom</a>
  )}
</h1>
<p style="text-align:center;margin-bottom:24px" id="links">
  {menuItems.map(({ url, label }, i) => {
    return (
      <>
        {i === 0 ? "" : " · "}
        {actualPath === `/${url}` ? (
          <span>{label}</span>
        ) : (
          <a href={`${import.meta.env.BASE_URL}${url}`}>{label}</a>
        )}
      </>
    )
  })}
</p>
<script
  set:html={`globalThis.actualPath=${JSON.stringify(
    actualPath
  )};globalThis.isEditMode=${isEditMode};const nonEditablePaths = new Set(["/cv"]);const urlPath = new URL(location.href).pathname;if(!globalThis.isEditMode&&localStorage.getItem("token")&&!nonEditablePaths.has(urlPath)){const textNode=document.createTextNode(" · ");const linkNode=document.createElement("A");linkNode.setAttribute("href",urlPath.endsWith("/") ? "./edit" : urlPath + "/edit");linkNode.textContent = "edit";const linksEl = document.getElementById("links");linksEl.appendChild(textNode);linksEl.appendChild(linkNode)}if(globalThis.isEditMode&&!localStorage.getItem("token")){globalThis.location.href="."};
  
  globalThis.plz = (path, data) => {
    return fetch('/api' + path, {
      method: "POST",
      headers: { "content-type": "application/json" },
      body: JSON.stringify(data),
    }).then((response) => {
      if (!response.ok) {
        throw new Error(response.status);
      }
    })
  }
    
    `}
>

</script>
